<tool id="phylophlan" name="PhyloPhlAn" version="0.1.0+galaxy0" python_template_version="3.5" profile="21.05">
    <description>
         microbial genome characterization and phylogenetic analysis
    </description>
	<macros>
        <import>macros.xml</import>
    </macros>
	<expand macro="requirements">
		<requirement type="package" version="3.11">python</requirement>
		<requirement type="package" version="2.1.11">diamond</requirement>
		<requirement type="package" version="2.16.0">blast</requirement>
		<requirement type="package" version="12.0">usearch</requirement>
		
		<requirement type="package" version="5.3">muscle</requirement>
		<requirement type="package" version="7.526">mafft</requirement>
		<!-- <requirement type="package" version="">opal</requirement> -->
		<!-- <requirement type="package" version="">upp</requirement> -->
		
		<requirement type="package" version="2.1.10">fasttree</requirement>
		<requirement type="package" version="8.2.12">raxml</requirement>
		<requirement type="package" version="2.4.0">iqtree</requirement>
		<requirement type="package" version="5.7.8">astral-tree</requirement>
		<!-- <requirement type="package" version="">astrid</requirement> -->
	</expand>
    <command detect_errors="exit_code"><![CDATA[
		#import re
		
		#if "nt" in $config.analysis.value
			#set $db_type = "n"
		#else if "aa" in $config.analysis.value
			#set $db_type = "a"
		#else
			#set $db_type = $config.db.type
		#end if
		
		mkdir -p 'input/' &&
		#for $i in $input
			#set $identifier = re.sub('[^\w\-\._]', '_', str($i.element_identifier))
			ln -s '$i' 'input/${identifier}' &&
		#end for
		
		mkdir -p 'database/' &&
		#if $db_type == "n"
			ln -s '$database' 'database/database.fna' &&
		#else
			ln -s '$database' 'database/database.faa' &&
		#end if
		
		phylophlan_write_config_file
			-o config.cfg
			-d $db_type
			#if $trimming.trim != "None"
				--trim trimal
			#end if
			
			#if $config.analysis == "supermatrix_nt"
				--db_dna makeblastdb
				--map_dna blastn
				--msa mafft
				--tree1 fasttree
				--tree2 raxml
			#else if $config.analysis == "supertree_nt"
				--db_dna makeblastdb
				--map_dna blastn
				--msa mafft
				--gene_tree1 fasttree
				--gene_tree2 raxml
				--tree1 astral
			#else if $config.analysis == "supermatrix_aa"
				--db_aa diamond
				--map_dna diamond
				--map_aa diamond
				--msa mafft
				--tree1 fasttree
				--tree2 raxml
			#else if $config.analysis == "supertree_aa"
				--db_aa diamond
				--map_dna diamond
				--map_aa diamond
				--msa mafft
				--gene_tree1 fasttree
				--gene_tree2 raxml
				--tree1 astral
			#else
				#if $config.db.type == "n"
					--db_dna $config.db.db_dna
					--map_dna $config.db.map_dna
				#else if $config.db.type == "a"
					--db_aa $config.db.db_aa
					--map_aa $config.db.map_aa
					#if $config.db.map_dna
						--map_dna $config.db.map_dna
					#end if
				#end if
				--msa $config.msa
				
				#if $config.gene_tree.gene_tree1
					--gene_tree1 $config.gene_tree.gene_tree1
					#if $config.gene_tree.gene_tree2
						--gene_tree2 $config.gene_tree.gene_tree2
					#end if
				#end if
				--tree1 $config.tree.tree1
				#if $config.tree.tree2
					--tree2 raxml
				#end if
			#end if
			
			$force_nucleotides
			--overwrite &&
		
		phylophlan
			-i input
			-o output
			-d database
			-f config.cfg
			
			--diversity $diversity
			$accuracy
			
			--min_num_proteins $quality.min_num_proteins
			--min_len_protein $quality.min_len_protein
			#if $quality.min_num_markers
				--min_num_markers $quality.min_num_markers
			#end if
			#if $quality.min_num_entries
				--min_num_entries $quality.min_num_entries
			#end if
			
			$quality.remove_only_gaps_entries
			#if not $quality.remove_only_gaps_entries
				$quality.remove_fragmentary_entries
				#if $quality.fragmentary_threshold
					--fragmentary_threshold $quality.fragmentary_threshold
				#end if
			#end if
			
			#if $trimming.trim != "None"
				--trim $trimming.trim
				#if $trimming.trim.value in {'gap_perc', 'greedy'}
					--gap_perc_threshold $trimming.gap_perc_threshold
				#end if
				#if $trimming.trim.value in {'not_variant', 'greedy'}
					--not_variant_threshold $trimming.not_variant_threshold
				#end if
			#end if
			
			#if $sample.subsample != "default"
				--subsample $sample.subsample
			#end if
			#if $sample.scoring_function
				--scoring_function $sample.scoring_function
			#end if
			#if $sample.submat
				--submat $sample.submat
			#end if
			
			$force_nucleotides
			$sort
			
			-t $db_type
			--nproc \${GALAXY_SLOTS:-4}
			--verbose
    ]]></command>
    <inputs>
		<!-- Todo: Handle input/database files with unexpected filenames/designations -->
		<param name="input" type="data_collection" collection_type="list" format="fasta,fasta.gz" label="Input Dataset"
			   help="In order for PhyloPhlAn to detect the input files in the collection, the fasta files MUST have the extensions '.fna' for nucleotide sequences and '.faa' for amino acid sequences. (Or '.fna.gz' and '.faa.gz' respectively.)"/>
		<param name="database" type="data" format="fasta" label="Reference Database"/>
		<conditional name="config">
			<param type="select" name="analysis" label="Configure which external software to use for the analysis">
					<option value="supermatrix_nt">supermatrix_nt (blast, mafft, fasttree, raxml)</option>
					<option value="supertree_nt">supertree_nt (blast, mafft, fasttree, raxml, astral)</option>
					<option value="supermatrix_aa">supermatrix_aa (diamond, mafft, fasttree, raxml)</option>
					<option value="supertree_aa">supertree_aa (diamond, mafft, fasttree, raxml, astral)</option>
					<option value="custom">Custom</option>
			</param>
			<when value="supermatrix_nt"/>
			<when value="supertree_nt"/>
			<when value="supermatrix_aa"/>
			<when value="supertree_aa"/>
			<when value="custom">
				<conditional name="db">
					<param type="select" name="type" argument="-d / -t" label="Database marker type">
						<option value="n">Nucleotides</option>
						<option value="a">Amino acids</option>
					</param>
					<when value="n">
						<param type="select" argument="--db_dna" label="Nucleotide database">
							<option value="makeblastdb">makeblastdb</option>
						</param>
						<param type="select" argument="--map_dna" label="Map genomes using">
							<option value="blastn">blastn</option>
							<option value="tblastn">tblastn</option>
							<option value="diamond">diamond</option>
						</param>
					</when>
					<when value="a">
						<param type="select" argument="--db_aa" label="Amino acid database">
							<option value="diamond">diamond</option>
							<option value="usearch">usearch</option>
						</param>
						<param type="select" argument="--map_aa" label="Map proteomes using">
							<option value="diamond">diamond</option>
							<option value="usearch">usearch</option>
						</param>
						<param type="select" argument="--map_dna" label="Map genomes using" optional="true">
							<option value="diamond">diamond</option>
							<option value="blastn">blastn</option>
							<option value="tblastn">tblastn</option>
						</param>
					</when>
				</conditional>
				<param type="select" argument="--msa" label="Multiple-sequence alignment">
					<option value="mafft">mafft</option>
					<option value="muscle">muscle</option>
					<option value="opal">opal</option>
					<option value="upp">upp</option>
				</param>
				<section name="gene_tree" title="Single-gene trees (Supertree)"
						 help="To use the gene trees pipeline instead of the supermatrix (or concatenation) pipeline select an option for the --gene_tree1 argument.
						 Additionally the --tree1 argument should be 'astral'."> <!-- Todo: do this automatically? -->
					<param type="select" argument="--gene_tree1" optional="true" label="Build phylogenies">
						<option value="fasttree">fasttree</option>
						<option value="raxml">raxml</option>
						<option value="iqtree">iqtree</option>
					</param>
					<param type="select" argument="--gene_tree2" optional="true" label="Refine phylogenies">
						<option value="raxml">raxml</option>
					</param>
				</section>
				<section name="tree" title="Phylogeny" expanded="true">
					<param type="select" argument="--tree1" label="Build phylogeny">
						<option value="fasttree">fasttree</option>
						<option value="raxml">raxml</option>
						<option value="iqtree">iqtree</option>
						<option value="astral">astral</option>
						<option value="astrid">astrid</option>
					</param>
					<param type="select" argument="--tree2" optional="true" label="Refine phylogeny">
						<option value="raxml">raxml</option>
					</param>
				</section>
			</when>
		</conditional>
		<param argument="--diversity" type="select" label="Diversity" help="Set parameters to default values in accordance with the expected diversity of the phylogeny to be build.">
			<option value="low">low (for species- and strain-level phylogenies)</option>
			<option value="medium">medium (for genus- and family-level phylogenies)</option>
			<option value="high">high (for tree-of-life and higher-ranked taxonomic phylogenies)</option>
		</param>
		<param name="accuracy" type="boolean" truevalue="--fast" falsevalue="--accurate" argument="--fast"
			   label="Reduce the number of considered phylogenetic positions (faster, but less accurate)"
			   help="Affected parameters depend on the --diversity level."/>
		<section name="quality" title="Input quality thresholds" help="Discard input genomes/proteomes and phylogenetic markers with insufficient quality.">
			<param argument="--min_num_proteins" type="integer" value="1" label="Minimum proteins per proteome"/>
			<param argument="--min_len_protein" type="integer" value="50" label="Minimum protein length"/>
			<param argument="--min_num_markers" type="integer" value="1" label="Minimum mapped markers"
				   help="Discard input genomes or proteomes that map to less markers."/> <!-- default changes for special -d databases -->
			<param argument="--min_num_entries" type="integer" value="4" label="Minimum found entries."
				   help="Discard markers that are found in less inputs than this."/>
			<param argument="--remove_fragmentary_entries" type="boolean" truevalue="--remove_fragmentary_entries" falsevalue=""
				   label="Remove fragmentary entries"/>
			<param argument="--fragmentary_threshold" type="float" optional="true" label="Fragmentary threshold"
				   help="The fraction of gaps in the MSA to be considered fragmentary."/>
			<param argument="--remove_only_gaps_entries" type="boolean" truevalue="--remove_only_gaps_entries" falsevalue=""
				   label="Remove gap-only entries"
				   help="Remove entries composed only of gaps (&#34;-&#34;)&lt;br&gt;Equivalent to &#34;--remove_fragmentary_entries --fragmentary_threshold 1&#34;."/>
		</section>
		<conditional name="trimming">
			<param argument="--trim" type="select" label="Trimming strategy">
				<option value="None">Default</option>
				<option value="gap_trim">Use trimAl</option>
				<option value="gap_perc">Gap percentage</option>
				<option value="not_variant">Not a variant</option>
				<option value="greedy">All (greedy)</option>
			</param>
			<when value="None"/>
			<when value="gap_trim"/>
			<when value="gap_perc">
				<param argument="--gap_perc_threshold" type="float" optional="true" label="Gap threshold"
					   help="Remove columns with a percentage of gaps above the threshold."/>
			</when>
			<when value="not_variant">
				<param argument="--not_variant_threshold" type="float" optional="true" label="Variant threshold"
					   help="Remove columns where at least one amino acid appears more often than the threshold frequency."/>
			</when>
			<when value="greedy">
				<param argument="--gap_perc_threshold" type="float" optional="true" label="Gap threshold"
					   help="Remove columns with a percentage of gaps above the threshold."/>
				<param argument="--not_variant_threshold" type="float" optional="true" label="Variant threshold"
					   help="Remove columns where at least one amino acid appears more often than the threshold frequency."/>
			</when>
		</conditional>
			<section name="sample" title="Subsampling"
				 help="Retain only a certain amount of phylogenetically relevant marker positions.">
			<param argument="--subsample" type="select" label="How many positions per marker should be retained?">
				<option value="default">Default</option>
				<option value="full">All</option>
				<option value="onethousand">Retain up-to 1000 positions</option>
				<option value="sevenhundred">Retain up-to 700 positions</option>
				<option value="fivehundred">Retain up-to 500 positions</option>
				<option value="threehundred">Retain up-to 300 positions</option>
				<option value="onehundred">Retain up-to 100 positions</option>
				<option value="fifty">Retain up-to 50 positions</option>
				<option value="twentyfive">Retain up-to 25 positions</option>
				<option value="tenpercent">Retain 10%</option>
				<option value="twentyfivepercent">Retain 25%</option>
				<option value="fiftypercent">Retain 50%</option>
				<!-- <option value="phylophlan"></option> -->
			</param>
			<param argument="--scoring_function" type="select" label="Scoring function" optional="true"
				   help="Used to rank MSA positions to decide which to retain.">
				<!-- Todo: explain functions -->
				<option value="muscle"></option>
				<option value="trident"></option>
			</param>
			<param argument="--submat" type="select" label="Substitution matrix"
				   help="The scoring functions use a substitution matrix to evaluate the expected substitution rates of amino acids.">
				<!-- technically optional, but always defaults to pfasum60 -->
				<option value="pfasum60"></option>
				<option value="vtml200"></option>
				<option value="vtml240"></option>
				<option value="miqs"></option>
			</param>
		</section>
		<param argument="--force_nucleotides" type="boolean" truevalue="--force_nucleotides" falsevalue=""
			   label="Force nucleotides"
			   help="Force PhyloPhlAn to use nucleotide sequences for the phylogenetic analysis, even in the case of a database of amino acids."/>
		<param argument="--sort" type="boolean" truevalue="--sort" falsevalue=""
			   label="Sort markers"
			   help="Force PhylophlAn to consider markers in a specific order when concatenating sequences."/>
			   <!-- Sort is only used for super-matrix approach (concatenation) -->
			   <!-- Todo: maas option and other settings for the gene tree pipeline -->
	</inputs>
    <outputs>
		<data name="output" format="txt">
			<discover_datasets pattern="__designation__" format="txt" visible="true" directory="output" assign_primary_output="true"/>
		</data>
    </outputs>
    <tests>
	    <test>
            <param name="input">
				<collection type="list">
					<element name="GCA_003236755_trunc.fna" value="GCA_003236755_trunc.fna" ftype="fasta"/>
					<element name="GCA_003236765_trunc.fna" value="GCA_003236765_trunc.fna" ftype="fasta"/>
					<element name="GCA_003236795_trunc.fna" value="GCA_003236795_trunc.fna" ftype="fasta"/>
					<element name="GCA_003236805_trunc.fna" value="GCA_003236805_trunc.fna" ftype="fasta"/>
				</collection>
			</param>
            <param name="database" ftype="fasta" value="database_trunc.faa"/>
            <param name="analysis" value="supermatrix_aa"/>
            <param name="diversity" value="low"/>
            <param name="accuracy" value="false"/>
			<section name="quality">
				<param name="min_num_entries" value="1"/>
				<param name="remove_fragmentary_entries" value="true"/>
				<param name="fragmentary_threshold" value="0.67"/>
			</section>
            <param name="trim" value="gap_trim"/>
            <param name="force_nucleotides" value="true"/>
            <output name="output">
				<assert_contents>
					<has_text_matching expression="\(.?(?:GCA_003236(?:805|755|765|795)_trunc:.+)+\):\d+\.\d+;"/>
				</assert_contents>
				<discovered_dataset designation="input_concatenated.aln"> <!-- ftype="txt" value="input_concatenated.aln" compare="contains" -->
					<assert_contents>
						<has_line_matching n="4" expression=">GCA_003236(?:805|755|765|795)_trunc"/>
						<has_n_lines n="736" delta="1"/>
					</assert_contents>
				</discovered_dataset>
			</output>
        </test>
	    <test>
            <param name="input">
				<collection type="list">
					<element name="GCA_000007905_truncated.fna" value="GCA_000007905_truncated.fna" ftype="fasta"/>
					<element name="GCA_000008525_truncated.fna" value="GCA_000008525_truncated.fna" ftype="fasta"/>
					<element name="GCA_000012345_truncated.fna" value="GCA_000012345_truncated.fna" ftype="fasta"/>
					<element name="GCA_000012965_truncated.fna" value="GCA_000012965_truncated.fna" ftype="fasta"/>
					<element name="GCA_000014865_truncated.fna" value="GCA_000014865_truncated.fna" ftype="fasta"/>
					<element name="GCA_000020825_truncated.fna" value="GCA_000020825_truncated.fna" ftype="fasta"/>
				</collection>
			</param>
            <param name="database" ftype="fasta" value="phylophlan_markers_filtered.faa"/>
            <param name="analysis" value="custom"/>
            <param name="type" value="a"/>
            <param name="db_aa" value="diamond"/>
            <param name="map_dna" value="diamond"/>
            <param name="map_aa" value="diamond"/>
            <param name="msa" value="mafft"/>
            <param name="tree1" value="iqtree"/>
            <param name="diversity" value="high"/>
            <param name="accuracy" value="true"/>
            <output name="output">
				<assert_contents>
					<has_text_matching expression="\(.?(?:GCA_0000(?:0790|0852|1234|1296|1486|2082)5_truncated:.+)+\);"/>
				</assert_contents>
				<discovered_dataset designation="input_concatenated.aln">
					<assert_contents>
						<has_line_matching n="6" expression=">GCA_0000(?:0790|0852|1234|1296|1486|2082)5_truncated"/>
						<has_n_lines n="18" delta="1"/>
					</assert_contents>
				</discovered_dataset>
				<discovered_dataset designation="input.tre.treefile">
					<assert_contents>
						<has_text_matching expression="\(.?(?:GCA_0000(?:0790|0852|1234|1296|1486|2082)5_truncated:.+)+\);"/>
					</assert_contents>
				</discovered_dataset>
			</output>
        </test>
    </tests>
    <help><![CDATA[
PhyloPhlAn is an accurate, rapid, and easy-to-use method for large-scale microbial genome characterization and
phylogenetic analysis at multiple levels of resolution. PhyloPhlAn can assign finished, draft, or metagenome-assembled
genomes (MAGs) to species-level genome bins (SGBs). For individual clades of interest (e.g. newly sequenced genome
sets), PhyloPhlAn reconstructs strain-level phylogenies from among the closest species using clade-specific maximally
informative markers. At the other extreme of resolution, PhyloPhlAn scales to very-large phylogenies comprising
>17,000 microbial species

options (Todo):
  --strainphlan         The inputs are aligned markers from StrainPhlAn (default: False)
  --submod_list         List of all the available substitution models that can be specified with the --maas option
                        (default: False)
  --unknown_fraction UNKNOWN_FRACTION
                        Define the amount of unknowns ("X" and "-") allowed in each column of the MSA of the markers
                        (default: 0.3)
  --maas MAAS           Select a mapping file that specifies the substitution model of amino acid to use for each of
                        the markers for the gene tree reconstruction. File must be tab-separated (default: None)
  --mutation_rates      If specified will produced a mutation rates table for each of the aligned markers and a
                        summary table for the concatenated MSA. This operation can take a long time to finish
                        (default: False)
  --convert_N2gap       If specified Ns will be forced to gaps (-) after the MSAs and only whit nucleotides MSAs
                        (default: False)

    ]]></help>
    <expand macro="citations"/>
</tool>